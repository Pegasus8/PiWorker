package stats

import (
	"time"

	"github.com/rs/zerolog/log"
)

// StartLoop is the function used to start the loop used to work with
// the statistics generated by PiWorker and the Raspberry Pi where it's running.
// Returns the instance of the database with the purpose of be closed properly.
func StartLoop(stopSignal chan struct{}) {
	log.Info().Msg("Starting stats loop")

	sTicker := time.NewTicker(60 * time.Second)
	updateSignal := make(chan struct{})

	// Update the variable for first time
	if err := UpdateRPiStats(); err != nil {
		log.Panic().Err(err).Msg("Error when trying to update the rpi stats")
	}

	go graduateFreq(updateSignal, stopSignal)

	go updateLoop(updateSignal, stopSignal)

	for {
		select {
		case <-sTicker.C:

		case <-stopSignal:
			{
				log.Info().Msg("Stopping statistics loop")
				sTicker.Stop()
				DB.Close()
				return
			}
		}

		Current.RLock()
		if err := StoreRStats(&Current.RaspberryStats); err != nil {
			log.Panic().Err(err).Msg("Error when trying to store raspberry stats on the db")
		}
		if err := StoreTStats(&Current.TasksStats); err != nil {
			log.Panic().Err(err).Msg("Error when trying to store tasks stats on the db")
		}
		Current.RUnlock()
	}
}

// This function will notify when at least one websocket connection is active.
func graduateFreq(updateChan, stop chan struct{}) {
	f := time.NewTicker(1 * time.Second)

	for range f.C {
		select {
		case <-stop:
			{
				f.Stop()
				break
			}
		default:
		}

		WSConns.RLock()
		if WSConns.N > 0 {
			// If there is at least one active connection, send the signal.
			updateChan <- struct{}{}
		}
		WSConns.RUnlock()
	}
}

// This function is which updates the variable that stores the statistics related with the raspberry pi (or the device running PiWorker).
func updateLoop(updateSignal, stopSignal chan struct{}) {
	t := time.NewTicker(50 * time.Second)

	for {
		select {
		case <-updateSignal:

		case <-t.C:

		case <-stopSignal:
			{
				log.Info().Msg("Stopping statistics updater loop")
				t.Stop()
				return
			}
		}

		if err := UpdateRPiStats(); err != nil {
			log.Panic().Err(err).Msg("Error when trying to update the rpi stats")
		}
	}
}
